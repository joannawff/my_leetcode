Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
For example,
Given nums = [0, 1, 3] return 2.
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
########################################
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int total = 0;
        for (int num:nums) {
            total += num;
        }
        return (1+n) * n / 2 - total;
    }
};
########################################
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int result = nums.size();
        int i = 0;
        for (int num:nums) {
            result ^= num;
            result ^= i;
            i++;
        }
        return result;
    }
};
