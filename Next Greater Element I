Question:
You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Solution:
1. 19ms, Your runtime beats 10.06% of cpp submissions.
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {
        vector<int> result;
        for (int i = 0; i < findNums.size(); i++) {
            int head = 0;
            while (head < nums.size() && nums[head] != findNums[i]) 
                head++;
            int tail = head + 1;
            while (tail < nums.size() && nums[tail] < findNums[i])
                tail++;
            if (tail == nums.size()) 
                result.push_back(-1);
            else
                result.push_back(nums[tail]);
        }
        return result;
    }
};

2. 15ms, Your runtime beats 38.80% of cpp submissions.
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {
        stack<int> s;
        unordered_map<int, int> m;
        for (int n : nums) {
            while (s.size() && s.top() < n) {
                m[s.top()] = n;
                s.pop();
            }
            s.push(n);
        }
        vector<int> ans;
        for (int n : findNums) ans.push_back(m.count(n) ? m[n] : -1);
        return ans;
    }
};
