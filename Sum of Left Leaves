Sum of Left Leaves:
Find the sum of all left leaves in a given binary tree.
Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.
####################################################
Solution1:
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if (!root) return 0;
        if (root->left && !root->left->left && !root->left->right) return root->left->val + sumOfLeftLeaves(root->right);
        return sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);
    }
####################################################
Solution2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void find_sum(TreeNode* root, int& res, string tag) {
        if (root->left == NULL && root->right == NULL && tag == "left"){
            cout << root->val << " " << tag << endl;
            res += root->val;
        }
        if (root->left) {
            find_sum(root->left, res, "left");
        }
        if (root->right) {
            find_sum(root->right, res, "right");
        }
    }
    int sumOfLeftLeaves(TreeNode* root) {
        int res = 0;
        if (root == NULL) {
            return res;
        }
        if (root->left) {
            find_sum(root->left, res, "left");
        }
        if (root->right) {
            find_sum(root->right, res, "right");
        }
        return res;
    }
};
